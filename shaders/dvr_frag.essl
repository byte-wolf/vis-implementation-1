#ifndef GL_ES
#version 330 es
#endif

precision highp int;
precision highp float;
precision highp sampler3D;

in vec3 vWorldPosition;

uniform vec3 uCameraPosition;
uniform sampler3D uVolumeTexture;
uniform vec3 uVolumeSize;
uniform vec3 uBackgroundColor;
uniform vec3 uForegroundColor;

uniform vec3 uCuttingPlanePosition; // point
uniform vec3 uCuttingPlaneRotation; // normal

out vec4 fragColor;

// https://tavianator.com/2011/ray_box.html
bool intersectBox(vec3 rayOrigin, vec3 rayDirection, out float tMin, out float tMax) {
    vec3 boxMin = -uVolumeSize * 0.5;
    vec3 boxMax = uVolumeSize * 0.5;

    vec3 invDir = 1.0 / rayDirection;

    vec3 tMinPlane = (boxMin - rayOrigin) * invDir;
    vec3 tMaxPlane = (boxMax - rayOrigin) * invDir;

    vec3 t1 = min(tMinPlane, tMaxPlane);
    vec3 t2 = max(tMinPlane, tMaxPlane);

    tMin = max(max(t1.x, t1.y), t1.z);
    tMax = min(min(t2.x, t2.y), t2.z);

    return tMin < tMax && tMax > 0.0;
}

void main() {
    vec3 rayOrigin = uCameraPosition;
    vec3 rayDirection = normalize(vWorldPosition - rayOrigin);

    float tMin, tMax;
    bool hit = intersectBox(rayOrigin, rayDirection, tMin, tMax);

    fragColor = vec4(normalize(abs(vWorldPosition)) * 0.5, 1.0);

    if (!hit) {
        discard;
    }

    tMin = max(tMin, 0.0);

    float maxIntensity = 0.0;

    vec3 startPoint = rayOrigin + rayDirection * tMin;
    vec3 endPoint = rayOrigin + rayDirection * tMax;

    float dt = 1.0;

    for (float t = tMin; t < tMax; t += dt) {
        vec3 currentPos = rayOrigin + rayDirection * t;

        float d = dot(currentPos - uCuttingPlanePosition, uCuttingPlaneRotation);

        if (d == 0.0) {
            discard;
            // maxIntensity = 1.0; // Skip points on the plane
            // break;
        } else if (d < 0.0) {
            continue; // Skip points behind the plane
        }

        vec3 textureCoord = (currentPos / uVolumeSize) + 0.5;

        if (all(greaterThanEqual(textureCoord, vec3(0.0))) && all(lessThanEqual(textureCoord, vec3(1.0)))) {
            float density = texture(uVolumeTexture, textureCoord).r;
            maxIntensity = max(maxIntensity, density);
        }
    }

    if (maxIntensity <= 0.1) {
        discard;
    }

    fragColor = vec4(mix(uBackgroundColor, uForegroundColor, maxIntensity), 1.0);
}